Cartouches Fonctionnement :

Lien vers Github pages :
Sujet git : Fix (beug), feat (fonctionnalité), impl (implementation), initial
https://jeanmarcj.github.io/JeanMarcJuif_3_09022021/index.html

Lancer SASS :
./dart-sass/sass SASS/style.scss css/main.css --watch

================================================================
Brief

Fonctionnalités :
Responsive sur mobile, tablette et desktop
Validation W3C en html et CSS sans erreur.
Compatible Chrome et Firefox.

Effets graphiques et animations :
Boutons
Au survol, la couleur de fond des boutons principaux devra légèrement s’éclaircir.
L’ombre portée devra également être plus visible.
Au survol sur desktop, le bouton « j’aime » en forme de coeur devra remplir progressivement.

Page d’accueil
Au chargement de la page, aperçu d’un « loading spinner » pendant 3 secondes.
Il doit couvrir l’intégralité de l’écran (en css uniquement, pas de librairie).
Loader au choix, pas de design défini pour ce composant.
Il doit être cohérent avec la charte graphique du site.

Page de menu
A l’arrivée sur la page, les plats devront apparaître progressivement avec un léger décalage dans le temps.
Ils pourront soit apparaître un par un, soit par groupe « Entrée », « Plat » et « Dessert ».
Voir exemple fourni.

Le visiteur peut ajouter les plats qu'il souhaite à sa commande en cliquant dessus.
Cela fait apparaître une petite coche à droite du plat.
Cette coche devra coulisser de la droite vers la gauche.
Pour cette première version, l’effet peut apparaître au survol sur desktop au lieu du clic.
Si l’intitulé du plat est trop long, il devra être rogné avec des points de suspension.
Un exemple de l’effet attendu est fourni.

================================================================


Dans le css -> Faire un import des classes communes à toutes les pages via SCSS.
Factoriser les classes CSS pour éviter les répétissions (idem classe btn)
comme dans le menu, le footer etc.


#1 Dans le footer, ne pas utiliser d'image, juste un texte avec la police --> OK
#2 Propriété CSS: text ellipsis --> OK

Responsive design pour tout le site --> OK
Animation intro page accueil --> OK.
Animation des boutons --> OK.
Animation de l'arrivée progressive des plats des menus --> OK.

Footer : Passer en horizontal les éléments pour les versions desktop --> OK.
Page restaurant -> Centrer le coeur et le nom du restaurant --> OK.
Restaurant -> Agrandir les cartes du menu en >1250px --> OK.
Card Fonctionnement -> Background avec un peu de violet --> OK.
Ralentir l'animation d'apparition des cartouches du menu --> OK.
Animation du coeur --> OK.
Fin de la formation OC Simplifiez-vous le CSS avec Sass --> OK.
Création de la structure de fichiers SASS 7-1 --> OK.

20/04/2021
Animation loader à travailler pour qu'elle soit plus lisible et percutante.
Animation plus percutante.
Animation de la case à cocher dans la page restaurant --> A faire.
Passer en tout SCSS --> En cours (structure OK avec import des fichiers)
Créer des sélecteurs HTML avec BAM (voir cours)
Nommer les sélecteurs avec efficacité (Voir PDF)
Refactoriser le SCSS avec le nesting (imbrication des sélecteurs pour un code plus lisible)
Refactoriser avec les variables SASS.
Gestion des breakpoints avec SASS.
Découpage de la structure des pages HTML.
Vérification du code W3C







================================================================
Questions mentor :
Logo en-tête : utiliser la police de caractères ? Non
Template restaurants : break-point à 1250px ? Oui






================================================================
SNIPPET :

Pour le coeur :
html
<section>
  <h2 >Exemple dégradé</h2>
    <div><i class="fa fa-heart"></i></div>
 </section>

 css
section div {
  border: 3px dashed red;
}
.fa {
  font-size: 128px;
  color: #ffabc1;
  display: block;
  background: -webkit-linear-gradient(#ffabc1, #356ad2);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  border: 3px solid red;
}

Bouncing loader
<div class="bouncing-loader">
  <div></div>
  <div></div>
  <div></div>
</div>

CSS
@keyframes bouncing-loader {
  to {
    opacity: 0.1;
    transform: translate3d(0, -16px, 0);
  }
}

.bouncing-loader {
  display: flex;
  justify-content: center;
}

.bouncing-loader > div {
  width: 16px;
  height: 16px;
  margin: 3rem 0.2rem;
  background: #8385aa;
  border-radius: 50%;
  animation: bouncing-loader 0.6s infinite alternate;
}

.bouncing-loader > div:nth-child(2) {
  animation-delay: 0.2s;
}

.bouncing-loader > div:nth-child(3) {
  animation-delay: 0.4s;
}

Source : https://www.30secondsofcode.org/css/s/bouncing-loader

Donut spinner
<div class="donut"></div>

CSS
@keyframes donut-spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.donut {
  display: inline-block;
  border: 4px solid rgba(0, 0, 0, 0.1);
  border-left-color: #7983ff;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  animation: donut-spin 1.2s linear infinite;
}


Popout menu : https://www.30secondsofcode.org/css/s/popout-menu

Truncate text : https://www.30secondsofcode.org/css/s/truncate-text

Checkbox
<div class="checkbox">
  <i class="fas fa-check-circle btn-circle"></i>
</div>

background-color: #ffe8f8;
background-image: url("https://www.transparenttextures.com/patterns/billie-holiday.png");
/* This is mostly intended for prototyping; please download the pattern and re-host for production environments. Thank you! */


